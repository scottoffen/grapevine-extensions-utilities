# This workflow will automatically build and test the project when code is merged
# into the main branch, then publish a release of the library to GitHub Packages.
# It can also be manually triggered to optionally publish to Nuget.org.
name: Publish Release

# The workflow_dispatch event allows you to run the workflow manually
# The push event triggers the workflow on pushes to the main branch
on:
  workflow_dispatch:
    inputs:
      pushNuget:
        description: 'Push to Nuget'
        required: false
        default: false
        type: boolean
      pushGitHub:
        description: 'Push to GitHub'
        required: false
        default: true
        type: boolean
  push:
    branches:
    - main
    paths:
      - 'src/**'
      - '!src/**/*.md'

jobs:
  # This job will build and run the tests for the project
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    # The matrix strategy allows you to run the same steps on multiple operating systems
    # The library should be compatible with all the operating systems in the matrix
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    # The steps below will run in order for each of strategies defined in the matrix
    steps:

    # Installs the most recent versions of the .NET SDKs
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    # Displays the available .NET SDKs for verification
    - name: Display Available .NET SDKs
      run: dotnet --list-sdks

    # Checks out the code from the repository using a deep clone
    # The deep clone is necessary to access the full history of the repository
    # so that the NerdBank.GitVersioning tool can determine the version number
    - name: Checkout Code (Deep Clone)
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Restores the dependencies for the project
    - name: Restore Dependencies
      run: dotnet restore ./src

    # Builds the project without restoring the dependencies
    - name: Build Project
      run: dotnet build ./src --no-restore
  
    # Runs all the tests in the project except the integration tests
    # without rebuilding the project
    - name: Execute Test
      run: dotnet test ./src --no-build --verbosity normal --filter "Category!=Integration"

  # This job will determine if a pre-release package should be published
  check:
    name: Check for Source Code Changes
    needs: build
    runs-on: ubuntu-latest

    outputs:
      has_changes: ${{ steps.changed_files.outputs.any_changed }}

    # The steps below will only run once
    steps:

      # Checks out the code from the repository using a deep clone
      # The deep clone is necessary to access the full history of the repository
      # so that the NerdBank.GitVersioning tool can determine the version number
      - name: Checkout code (Deep Clone)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Checks for changes in the ./src directory that are not markdown files
      # this step outputs a boolean value named any_changed that can be used in
      # conditional steps.
      - name: Check for source code changes
        id: changed_files
        uses: tj-actions/changed-files@v45
        with:
          files: 'src/Grapevine.Extensions.Utilities/**'
          files_ignore: '**/*.md'

  # This job will publish the package to GitHub Packages
  # While this job is dependent on the build job, do not combine the jobs as
  # the build job will run multiple times
  publish:
    name: Publish Package
    runs-on: ubuntu-latest
    needs: check
    if: ${{ needs.check.outputs.has_changes == 'true' }}

    # These permissions are required to publish the package to GitHub Packages
    permissions:
      contents: write
      packages: write

    # Get default values for the workflow_dispatch event inputs
    env:
      PUSH_GITHUB: ${{ github.event.inputs.pushGitHub || 'true' }}
      PUSH_NUGET: ${{ github.event.inputs.pushNuget || 'false' }}

    # The steps below will only run once
    steps:

    # Installs the most recent versions of the .NET SDKs
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    # Displays the available .NET SDKs for verification
    - name: Display Available .NET SDKs
      run: dotnet --list-sdks

    # Checks out the code from the repository using a deep clone
    # The deep clone is necessary to access the full history of the repository
    # so that the NerdBank.GitVersioning tool can determine the version number
    - name: Checkout Code (Deep Clone)
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Restores the dependencies for the project
    - name: Restore Dependencies
      run: dotnet restore ./src

    # Builds the project using the Release configuration without restoring dependencies
    - name: Build Release
      run: dotnet build ./src/Grapevine.Extensions.Utilities --no-restore --configuration Release --output ./publish

    # Output the github.event.inputs values
    - name: Display Inputs
      run: |
        echo "pushGitHub: $PUSH_GITHUB"
        echo "pushNuget: $PUSH_NUGET"

    # Publishes the package to GitHub Packages
    # This step is run by default, but can be disabled
    - name: Publish to GitHub Packages
      if: env.PUSH_GITHUB == 'true'
      run: |
        dotnet nuget push ./publish/*.nupkg --source https://nuget.pkg.github.com/scottoffen/index.json --api-key ${{ secrets.GITHUB_TOKEN }}
        dotnet nuget push ./publish/*.snupkg --source https://nuget.pkg.github.com/scottoffen/index.json --api-key ${{ secrets.GITHUB_TOKEN }}

    # Publishes the package to Nuget.org
    # This step is optional and can be triggered manually
    # The NUGET_API_KEY secret must be set in the repository settings
    - name: Publish to Nuget.org
      if: env.PUSH_NUGET == 'true'
      run: |
        dotnet nuget push ./publish/*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }}

    # Outputs the version number for the release
    # See https://www.jameskerr.blog/posts/how-to-set-output-in-github-actions/
    - name: Get Version Info
      id: get_version
      run: |
        cd src/Grapevine.Extensions.Utilities
        echo "version='$(nbgv get-version -v NugetPackageVersion)'" >> "$GITHUB_OUTPUT"
        cd ../..

    # Create a release tag based on the version number
    - name: Create Release
      run: gh release create ${{ steps.get_version.outputs.version }} --title ${{ steps.get_version.outputs.version }} --notes "Release ${{ steps.get_version.outputs.version }}" --target main
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}